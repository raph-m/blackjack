l'environnement est déjà écrit. Il a quelques trucs à vérifier et il faut commenter un peu le code mais sinon tout est là.

Le script play_blackjack permet de tester l'environnement en jouant au blackjack.

prochaines étapes:
- finir de coder l'environnement (débugger, commenter le code)
- faire une première stratégie de base (s'arrêter si le compte est supérieur à k) et chercher le meilleur k pour faire cette stratégie.
- chercher la stratégie idéale en fonction des cartes du joueur et des cartes du croupier
- chercher dans quel cas on a une espérance positive (à quel moment peut on considérer que la table est chaude ?)
- chercher si en jouant en comptant les cartes on peut obtenir une espérance positive et si oui pour quelle valeur du compte

call répartition des tâches:
- chercher les règles de cas vicieux et voir si on en a pas loupé. + tester l'environnement et relire le code de l'environnement.
- le split ? est ce que on peut splitter plusieurs fois dans la même partie ? normalement on a le droit de splitter plusieurs fois.
- attention quand on split sur des As il y a une règle chelou.
- environnement à tester encore un peu
- finir la fonction pour évaluer les stratégies (calcul d'espérance).
- stratégies: stratégie naive. pour score > x je m'arrete. calculer l'espérance pour chaque x
- faire une fonction qui te renvoie ton état. même deux fonctions. Une qui mange une suite de carte et qui te renvoie l'état donc soit sous forme d'ID soit sous forme
lisible par des humains. Genre soft-11-3. ou sinon paires-5-10.
- stratégies: stratégie de base à calculer en Monte-Carlo.
- stratégies: compteur. Implémenter le compteur. Le mieux c'est de l'incruster dans la classe Deck ou Dealer (enfin intégré à l'environnement quoi).
Et peut etre que après on recodera ça pour que ça soit bien personnalisable. (ML sur la fonction de comptage)


Boite à idées:
- faire une partie après avoir tiré genre 50 cartes. Faire des stats sur les cartes qui sont sorties et essayer de faire du ML classique dessus. Par exemple voir quelle cartes ont le plus d'impact -> essayer de faire un modèle de comptage grâce à ça.


Stratégie naive:
- la meilleure stratégie naive est de rester dès que le score est strictement plus grand que 16 et tirer sinon.

J'ai hardcoder la stratégie de base. Le pb c'est que quand je la teste j'ai une espérance positive.
Donc sûrement un problème avec l'environnment ou bien dans mon code qui s'occupe de calculer l'espérance. Je sais pas d'où ça vient ...